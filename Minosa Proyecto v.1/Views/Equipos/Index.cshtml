@model List<Minosa_Proyecto_v._1.Models.EquipoViewModel>
<h2 class="text-center">Inventario</h2>
@* <div class="row mt-3"> *@
@* <div class="col-md-3 col-12 mb-2"> *@

@* </div> *@
<div class="container text-center shadow-lg p-3 mb-5 bg-body-tertiary rounded">
    <div class="row">
        <div class="col m-2">
            @* <a asp-controller="Vlans" asp-action="Index" class="btn btn-secondary btn-block"><i class="fa-solid fa-wifi"></i> VLANs</a> *@
            <a asp-controller="Vlans" asp-action="Index" class="btn btn-secondary w-100"><img src="~/icons/wifi-solid.svg" style="width: 16px; height: 16px;"> VLANs</a>
        </div>
        <div class="col m-2">
            <a asp-controller="Proveedores" asp-action="Index" class="btn btn-secondary w-100"><img src="~/icons/truck-fast-solid.svg" style="width: 16px; height: 16px;"> Proveedores</a>
        </div>
        <div class="col m-2">
            <a asp-controller="TipoEquipos" asp-action="Index" class="btn btn-secondary w-100"><img src="~/icons/computer-solid.svg" style="width: 16px; height: 16px;"> Tipos de Equipo</a>
        </div>
        <div class="col m-2">
            <a asp-controller="Modelos" asp-action="Index" class="btn btn-secondary w-100"><img src="~/icons/clone-regular.svg" style="width: 16px; height: 16px;"> Modelos</a>
        </div>
        <div class="col m-2">
            <a asp-controller="DireccionesIp" asp-action="Index" class="btn btn-secondary w-100"><img src="~/icons/qrcode-solid.svg" style="width: 16px; height: 16px;"> Direcciones IP</a>
        </div>
    </div>
    <div class="row">
        <div class="col m-2">
            <a asp-controller="Marcas" asp-action="Index" class="btn btn-secondary w-100"><img src="~/icons/tags-solid.svg" style="width: 16px; height: 16px;"> Marcas</a>
        </div>
        <div class="col m-2">
            <a asp-controller="Areas" asp-action="Index" class="btn btn-secondary w-100"><img src="~/icons/school-solid.svg" style="width: 16px; height: 16px;"> Áreas</a>
        </div>
        <div class="col m-2">
            <a asp-controller="Zonas" asp-action="Index" class="btn btn-secondary w-100"><img src="~/icons/mountain-city-solid.svg" style="width: 16px; height: 16px;"> Zonas</a>
        </div>
        <div class="col m-2">
            <a asp-controller="Radio" asp-action="Index" class="btn btn-secondary w-100"><img src="~/icons/tower-cell-solid.svg" style="width: 16px; height: 16px;"> Radios</a>
        </div>
        <div class="col m-2">
            <a asp-controller="Materiales" asp-action="Index" class="btn btn-secondary w-100"><img src="~/icons/hammer-solid.svg" style="width: 16px; height: 16px;"> Materiales</a>
        </div>
    </div>
</div>









@* </div> *@

<div class="text-center">
    <h2 class="text-center">Lista de Equipos</h2>
    <button id="exportButton" class="btn btn-success m-2">
        <i class="fas fa-file-excel"></i> Exportar a Excel
    </button>
    <a asp-controller="EquiposDetalles" asp-action="Crear" class="btn btn-primary"><i class="fa-solid fa-folder-plus"></i> Nuevo Equipo</a>
</div>

<div class=" shadow-lg p-3 mb-5 bg-body-tertiary rounded">
    <table class="table table-bordered table-responsive" style="table-layout: auto; width: 100%;" id="equiposTable">
        <thead class="">
            <tr class="table-secondary">
                <th><input type="text" id="serialFilter" placeholder="Nº Serie" class="form-control" /></th>
                <th><input type="text" id="descripcionFilter" placeholder="Descripción" class="form-control" /></th>
                <th><input type="text" id="tipoEquipoFilter" placeholder="Buscar Tipo de Equipo" class="form-control" /></th>
                <th><input type="text" id="modeloFilter" placeholder="Buscar Modelo" class="form-control" /></th>
                <th><input type="text" id="areaFilter" placeholder="Buscar Área" class="form-control" /></th>
                <th><input type="text" id="direccionIpFilter" placeholder="Buscar Dirección IP" class="form-control" /></th>
                <th><input type="text" id="estadoFilter" placeholder="Buscar Estado" class="form-control" /></th>
                <th><input type="text" id="activoFilter" placeholder="Buscar Activo" class="form-control" /></th>
                <th><input type="text" id="respaldoFilter" placeholder="Buscar Respaldo" class="form-control" /></th>
                <th><input type="text" id="observacionesFilter" placeholder="Buscar Observaciones" class="form-control" /></th>
                <th>
                    <div>
                        <button id="clearFiltersButton" class="btn btn-danger">
                            <img src="~/icons/filter-circle-xmark-solid.svg" style="width: 16px; height: 16px;">
                        </button>

                    </div>
                </th>

            </tr>
        </thead>

        <thead class="table-dark">
            <tr>
                <th># de Serie</th>
                <th>Descripción</th>
                <th>Tipo de Equipo</th>
                <th>Modelo</th>
                <th>Área</th>
                <th>Dirección IP</th>
                <th>Estado</th>
                <th>Activo</th>
                <th>Respaldo</th>
                <th>Observaciones</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var equipo in Model)
            {
                <tr>
                    <td>@equipo.NumeroSerie</td>
                    <td>@equipo.Descripcion</td>
                    <td>@equipo.Tipo_Equipo</td>
                    <td>@equipo.Modelo</td>
                    <td>@equipo.Area</td>
                    <td>@equipo.Direccion_IP</td>
                    <td>@equipo.Estado</td>
                    @* <td>@equipo.Activo</td> *@
                    <td data-activo="@equipo.Activo">
                        @if (equipo.Activo)
                        {
                            <span>Si</span>
                        }
                        else
                        {
                            <span>No</span>
                        }
                    </td>
                    <td>@equipo.Respaldo</td>
                    <td>@equipo.Observaciones</td>
                    <td>
                        <a href="@Url.Action("Detalles", "EquiposDetalles", new { id = equipo.ID_equipo })" class="btn btn-info"><img src="~/icons/file-circle-question-solid.svg" style="width: 16px; height: 16px;"></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@if (ViewBag.Error != null)
{
    <div class="alert alert-danger">
        @ViewBag.Error
    </div>
}
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Función para filtrar filas de tabla en base a todos los valores del campo de entrada
        function applyFilters() {
            let filters = [
                { inputId: "serialFilter", columnIndex: 0 },
                { inputId: "descripcionFilter", columnIndex: 1 },
                { inputId: "tipoEquipoFilter", columnIndex: 2 },
                { inputId: "modeloFilter", columnIndex: 3 },
                { inputId: "areaFilter", columnIndex: 4 },
                { inputId: "direccionIpFilter", columnIndex: 5 },
                { inputId: "estadoFilter", columnIndex: 6 },
                { inputId: "activoFilter", columnIndex: 7 },
                { inputId: "respaldoFilter", columnIndex: 8 },
                { inputId: "observacionesFilter", columnIndex: 9 }
            ];

            let table = document.getElementById("equiposTable");
            let rows = table.getElementsByTagName("tr");

            for (let i = 2; i < rows.length; i++) { // Empezar desde 2 para saltarse las entradas de búsqueda y los encabezados
                let row = rows[i];
                let visible = true;

                // Check all Filtros
                for (let filter of filters) {
                    let input = document.getElementById(filter.inputId);
                    let filterValue = input.value.toLowerCase();
                    let cell = row.getElementsByTagName("td")[filter.columnIndex];

                    if (cell && filterValue) {
                        let cellValue = cell.textContent || cell.innerText;
                        if (cellValue.toLowerCase().indexOf(filterValue) === -1) {
                            visible = false;
                            break; // No hay necesidad de comprobar más filtros si uno falla
                        }
                    }
                }

                // Mostrar u ocultar la fila en función de las comprobaciones del filtro
                row.style.display = visible ? "" : "none";
            }
        }

        // Adjuntar los listeners de eventos a cada entrada del filtro
        let filterInputs = [
            "serialFilter", "descripcionFilter", "tipoEquipoFilter",
            "modeloFilter", "areaFilter", "direccionIpFilter",
            "estadoFilter", "activoFilter", "respaldoFilter",
            "observacionesFilter"
        ];

        for (let inputId of filterInputs) {
            let input = document.getElementById(inputId);
            input.addEventListener('keyup', applyFilters);
        }

        // Función de limpiar filtros
        document.getElementById('clearFiltersButton').addEventListener('click', function () {
            // Borrar todos los campos de entrada
            for (let inputId of filterInputs) {
                document.getElementById(inputId).value = '';
            }
            // Volver a aplicar los filtros para mostrar todas las filas
            applyFilters();
        });
    });
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<script>
        document.getElementById('exportButton').addEventListener('click', function () {
        // Obtener la tabla HTML
        let table = document.getElementById('equiposTable');

        // Convertir tabla HTML a una hoja de cálculo
        let workbook = XLSX.utils.table_to_book(table, { sheet: "Inventario" });

        // Exportar el archivo
        XLSX.writeFile(workbook, "Inventario.xlsx");
    });

</script>

@* <script>
            document.getElementById('exportButton').addEventListener('click', function () {
        // Clonar la tabla para evitar modificar el DOM original
        let table = document.getElementById('equiposTable').cloneNode(true);

        // Reemplazar los iconos de ping por valores de texto
        let rows = table.querySelectorAll('tbody tr');
        rows.forEach(row => {
            let pingCell = row.querySelector('td[data-activo]');
            if (pingCell) {
                let pingValue = pingCell.getAttribute('data-activo') === "True" ? "Activa" : "Inactiva";
                pingCell.textContent = pingValue;
            }
        });

        // Convertir la tabla clonada a una hoja de cálculo
        let workbook = XLSX.utils.table_to_book(table, { sheet: "Inventario" });

        // Exportar el archivo
        XLSX.writeFile(workbook, "Inventario.xlsx");

    });

</script> *@