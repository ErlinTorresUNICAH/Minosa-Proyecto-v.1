@model dynamic

<h2>Equipos por Tipo</h2>
<div id="equipmentChartContainer" style="width:100%; height:400px;"></div>

<h2>Equipos por Área</h2>
<div id="areaChartContainer" style="width:100%; height:400px;"></div>

<h2>Equipos por Zona</h2>
<div id="zoneChartContainer" style="width:100%; height:400px;"></div>


<h2>Equipos por Área con Tipos</h2>
<div id="areaChartContainerBasic" style="width:100%; height:400px;"></div>


<button id="generateReportButton" class="btn btn-primary">Generar Reporte PDF</button>

<script src="https://code.highcharts.com/highcharts.js"></script>
<script>
    // Data for Equipos por Tipo
    var dataEquiposPorTipo = [];

    @foreach (var item in Model.EquiposPorTipo)
    {
        <text>
                dataEquiposPorTipo.push(['@item.TipoEquipo', @item.Cantidad]);
        </text>
    }

    Highcharts.chart('equipmentChartContainer', {
        chart: {
            type: 'pie'
        },
        title: {
            text: 'Cantidad de Equipos por Tipo'
        },
        series: [{
            name: 'Cantidad',
            colorByPoint: true,
            data: dataEquiposPorTipo
        }],
        tooltip: {
            pointFormat: '{series.name}: <b>{point.y}</b>'
        },
        plotOptions: {
            pie: {
                allowPointSelect: true,
                cursor: 'pointer',
                dataLabels: {
                    enabled: true,
                    format: '<b>{point.name}</b>'
                }
            }
        }
    });

    // Data for Equipos por Área
    var dataEquiposPorArea = [];

    @foreach (var item in Model.EquiposPorArea)
    {
        <text>
                dataEquiposPorArea.push(['@item.Area', @item.Cantidad]);
        </text>
    }

    Highcharts.chart('areaChartContainerBasic', {
        chart: {
            type: 'bar'
        },
        title: {
            text: 'Cantidad de Equipos por Área'
        },
        xAxis: {
            type: 'category'
        },
        yAxis: {
            title: {
                text: 'Cantidad'
            }
        },
        series: [{
            name: 'Cantidad',
            data: dataEquiposPorArea
        }]
    });

    // Data for Equipos por Zona
    var dataEquiposPorZona = [];

    @foreach (var item in Model.EquiposPorZona)
    {
        <text>
                dataEquiposPorZona.push(['@item.Zona', @item.Cantidad]);
        </text>
    }

    Highcharts.chart('zoneChartContainer', {
        chart: {
            type: 'pie'
        },
        title: {
            text: 'Cantidad de Equipos por Zona'
        },
        xAxis: {
            type: 'category'
        },
        yAxis: {
            title: {
                text: 'Cantidad'
            }
        },
        series: [{
            name: 'Cantidad',
            data: dataEquiposPorZona
        }]
    });

    // Data for Equipos por Área con Tipos
    var dataByArea = {};

    @foreach (var item in Model.EquiposPorAreaConTipo)
    {
        <text>
                if (!dataByArea['@item.Area']) {
                    dataByArea['@item.Area'] = [];
                }
                dataByArea['@item.Area'].push({
                    name: '@item.TipoEquipo',
                    y: @item.Cantidad
                });
        </text>
    }

    // Transform data into Highcharts series format
    var seriesData = [];
    for (var area in dataByArea) {
        seriesData.push({
            name: area,
            data: dataByArea[area]
        });
    }

    //Initialize the Highcharts grouped bar chart
    Highcharts.chart('areaChartContainer', {
        chart: {
            type: 'column'
        },
        title: {
            text: 'Cantidad de Equipos por Área y Tipo'
        },
        xAxis: {
            type: 'category',
            title: {
                text: 'Área'
            }
        },
        yAxis: {
            title: {
                text: 'Cantidad'
            }
        },
        series: seriesData,
        plotOptions: {
            column: {
                stacking: 'normal',
                dataLabels: {
                    enabled: true
                }
            }
        },
        tooltip: {
            headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
            pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                '<td style="padding:0"><b>{point.y}</b></td></tr>',
            footerFormat: '</table>',
            shared: true,
            useHTML: true
        }
    });
    // Add logic for generating PDF report if needed
</script>

@* <script>
    document.getElementById('generateReportButton').addEventListener('click', function () {
    window.location.href = '/Graficos/GenerarReporte'; // Llama a tu función del controlador
    console.log("Reporte generado");
    });
</script> *@
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="https://code.highcharts.com/modules/export-data.js"></script>
<script src="https://code.highcharts.com/modules/offline-exporting.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/canvg/3.0.7/umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/svg2pdf.js/2.3.7/svg2pdf.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>


@* <script>
    document.getElementById('generateReportButton').addEventListener('click', function () {
        // Capturar el gráfico como imagen base64
        var chart = Highcharts.charts[0]; // Obtiene la instancia del gráfico
        if (!chart) {
        console.error('No se encontró ningún gráfico de Highcharts en la página.');
        return;
    }
        console.log("estos son los datos",chart);
        chart.exportChartLocal({
            type: 'image/png',
            filename: 'highchart-image',
            scale:2
            
        }, function (dataUrl) {
            // Enviar la imagen al servidor
            fetch('/Graficos/GenerarReporteConGrafico', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ base64Image: dataUrl })
            })
            .then(response => {
                if (response.ok) {
                    return response.blob();
                }
                throw new Error('Error al generar el reporte');
            })
            .then(blob => {
                // Crear un enlace temporal para descargar el PDF con la tabla y el gráfico
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;
                a.download = 'ReporteConGrafico.pdf'; // Nombre del archivo
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
            })
            .catch(error => console.error('Error al enviar la imagen al servidor:', error));
        });

        // También llamar a tu función de generar reporte con la tabla sin el gráfico
       /*  window.location.href = '/Graficos/GenerarReporte';  */// Llama a la otra función del controlador
        console.log("Reporte generado");
    });
</script>
 *@

<script>
    document.getElementById('generateReportButton').addEventListener('click', function () {
        window.location.href = '/Graficos/GenerarReporteConGrafico'; // Redirige a la función que genera el reporte con gráficos
        console.log("Reporte con gráfico generado");
    });
</script>
