@model List<Actividad>
<h1 class="text-center">Graficos y Predicciones de Ping</h1>
<div class="table-responsive">
    <table class="table  table-bordered" style="table-layout: auto; width: 100%;">
        <thead class="table-dark">
            <tr>
                <th>ID Equipo</th>
                <th>Dirección IP</th>
                <th>Área</th>
                <th>Descripción Equipo</th>
                <th>Tipo Equipo</th>
                <th>Ping</th>
                <th>Última Hora Ping</th>
                <th><a asp-action="Index" asp-controller="Actividad" class="btn btn-outline-secondary btn-sm"><i class="bi bi-clock-history"></i> Historial</a></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var actividad in Model)
            {
                <tr data-ip="@actividad.DireccionIP">
                    <td>@actividad.ID_Equipo</td>
                    <td>@actividad.DireccionIP</td>
                    <td>@actividad.Area</td>
                    <td>@actividad.DescripcionEquipo</td>
                    <td>@actividad.TipoEquipo</td>
                    <td>
                        @if (actividad.Ping)
                        {
                            <span class="text-success"><i class="bi bi-reception-4"></i></span>
                        }
                        else
                        {
                            <span class="text-danger"><i class="bi bi-reception-0"></i></span>
                        }
                    </td>
                    <td>@(actividad.UltimaHoraPing?.ToString("dd/MM/yyyy HH:mm:ss") ?? "No disponible")</td>
                    <td>
                        @if (!string.IsNullOrEmpty(actividad.DescripcionEquipo))
                        {
                            <a href="@Url.Action("Detalles", "EquiposDetalles", new { id = actividad.ID_Equipo })" class="btn btn-warning"><i class="bi bi-info-circle-fill"></i></a>

                            @* <button class="btn btn-warning btn-sm" onclick="predecir('@actividad.DireccionIP', '@actividad.UltimaHoraPing')">
                                Predecir Estado
                            </button> *@
                            <a href="@Url.Action("PredecirEstado", "Predicciones", new { ip = actividad.DireccionIP, hora = actividad.UltimaHoraPing?.ToString("dd/MM/yyyy HH:mm:ss") })"
                               class="btn btn-success">
                                <i class="bi bi-diagram-3"></i>
                            </a>



                        }
                        else
                        {
                            <a asp-controller="EquiposDetalles" asp-action="CrearActividad" asp-route-direccionIP="@actividad.DireccionIP" class="btn btn-primary btn-block">
                                <i class="fa-solid fa-folder-plus"></i> Asignar Equipo
                            </a>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@if (ViewBag.Error != null)
{
    <div class="alert alert-danger">
        @ViewBag.Error
    </div>
}
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<style>
    .fila-seleccionada {
        background-color: #d3e2f1; /* Cambia este color según prefieras */
    }
</style>

<script>
    $(document).ready(function () {
        // Captura el clic en las filas para seleccionar la IP y cambiar el color
        $('tr[data-ip]').on('click', function () {
            // Remueve la clase de cualquier otra fila seleccionada
            $('tr[data-ip]').removeClass('fila-seleccionada');
            // Agrega la clase a la fila clickeada
            $(this).addClass('fila-seleccionada');

            // Obtener la IP seleccionada
            const ipSeleccionada = $(this).data('ip');
            actualizarGraficoHistorialPings(ipSeleccionada);
        });

        function actualizarGraficoHistorialPings(ip) {
            $.ajax({
                // ObtenerHistorialPingsAJAX es la funcion que tiene los datos
                url: '@Url.Action("ObtenerHistorialPingsAJAX", "Actividad")',
                type: 'GET',
                data: { direccionIP: ip }, // Enviar la IP seleccionada al servidor
                success: function (data) {
                    if (Array.isArray(data) && data.length > 0) {
                        const filteredData = data.filter(ping => ping.direccionIP === ip);
                        var cantidadDatos = -10;
                        const limitedData = filteredData.slice(cantidadDatos);// datos a mostrar

                        const seriesData = limitedData.map(ping => {
                            console.log('asi se ve el la hora antes de formato',ping.ultimaHoraPing);
                            const fecha = new Date(ping.ultimaHoraPing).getTime(); // Marca de tiempo para las Highcharts
                            console.log('asi se ve la fecha',fecha);
                            return [fecha, ping.ping ? 1 : 0]; // Representar el estado de ping como 1 o 0
                        });

                        Highcharts.chart('container', {
                            chart: {
                                type: 'line'
                            },
                            title: {
                                text: `Historial de Pings para la IP ${ip} (Últimos ${cantidadDatos} Datos)`
                            },
                            xAxis: {
                                type: 'datetime',
                                title: {
                                    text: 'Fecha y Hora'
                                }
                            },
                            yAxis: {
                                title: {
                                    text: 'Estado de Ping'
                                },
                                labels: {
                                    formatter: function () {
                                        return this.value === 1 ? 'Activo' : 'Inactivo';
                                    }
                                },
                                min: 0,
                                max: 1,
                                tickInterval: 1
                            },
                            
                            tooltip: {
                                formatter: function () {
                                    const fecha = Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x); // Formato de la fecha
                                    const estado = this.y === 1 ? 'Activo' : 'Inactivo'; // Estado del ping
                                    return `<b>Fecha y Hora:</b> ${fecha}<br><b>Estado:</b> ${estado}`;
                                }
                            },
                            series: [{
                                name: 'Ping',
                                data: seriesData,
                                step: 'left',
                                tooltip: {
                                    pointFormatter: function () {
                                        return `Estado: ${this.y === 1 ? 'Activo' : 'Inactivo'}`;
                                    }
                                }
                            }]
                        });
                    } else {
                        $('#container').html('<p class="text-center">No hay historial de pings disponible para la IP seleccionada.</p>');
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error al obtener el historial de pings:", error);
                }
            });
        }
    });
</script>

@* <script>
    function predecir(ip, ultimaHoraPing) {
        // Crear un formulario oculto para enviar los datos al servidor
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '/Predicciones/PredecirEstado';

        // Crear campos ocultos para los datos
        const inputIp = document.createElement('input');
        inputIp.type = 'hidden';
        inputIp.name = 'ip';
        inputIp.value = ip;

        const inputHoraPing = document.createElement('input');
        inputHoraPing.type = 'hidden';
        inputHoraPing.name = 'ultimaHoraPing';
        inputHoraPing.value = ultimaHoraPing;

        // Agregar los campos al formulario
        form.appendChild(inputIp);
        form.appendChild(inputHoraPing);
        console.log('esta es la informacion:',form);
        console.log('esta es la informacion:',form.get('ip'));
        console.log('esta es la informacion:',form.get('ultimaHoraPing'));


        // Agregar el formulario al documento y enviarlo
        document.body.appendChild(form);
        form.submit();
    }
</script> *@
@* 
<script>
    function predecir(ip, ultimaHoraPing) {
        // URL del método en el controlador
        const url = '/Predicciones/PredecirEstado';

        // Construcción de datos para enviar
        const formData = new FormData();
        formData.append("ip", ip);
        formData.append("ultimaHoraPing", ultimaHoraPing);
        console.log('esta es la informacion:',formData);
        console.log('esta es la informacion:',formData.get('ip'));
        console.log('esta es la informacion:',formData.get('ultimaHoraPing'));
        // Envío de la solicitud al controlador
        fetch(url, {
            method: 'POST',
            body: formData
        })
        // .then(response => {
        //     if (response.ok) {
        //         return response.text(); Recibe el HTML de la vista de resultados
        //     } else {
        //         throw new Error('Error al realizar la predicción');
        //     }
        // })
        .then(response => {
            return response.text().then(text => {
            console.log('Respuesta del servidor completa:', response); // Muestra la respuesta completa
            console.log('Texto de la respuesta:', text); // Muestra el cuerpo de la respuesta
            if (!response.ok) {
                throw new Error(`Error del servidor: ${text}`);
            }
            return text;
            });
        })
        .then(html => {
            // Mostrar los resultados en un contenedor dinámico
            document.getElementById("resultados").innerHTML = html;
        })
        // .catch(error => {
        //     console.error('Error:', error);
        //     alert('Ocurrió un error al predecir el estado.');
        // });
    }
</script> *@


<!-- Contenedor para la gráfica -->
<div id="container"></div>
