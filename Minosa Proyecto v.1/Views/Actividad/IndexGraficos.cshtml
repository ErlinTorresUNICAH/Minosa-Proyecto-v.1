@model List<Actividad>
<div class="text-center">
    <h1 class="text-center">Graficos y Predicciones de Ping</h1>
    <button id="exportButton" class="btn btn-success m-2">
        <i class="fas fa-file-excel"></i> Exportar a Excel
    </button>
</div>
<div class="shadow-lg p-3 mb-5 bg-body-tertiary rounded">
    <table class="table-responsive table table-bordered" style="table-layout: auto; width: 100%;" id="actividadTable">
        <thead class="table-dark">
            <tr>
                <th>ID Equipo</th>
                <th>Dirección IP</th>
                <th>Área</th>
                <th>Descripción Equipo</th>
                <th>Tipo Equipo</th>
                <th>Ping</th>
                <th>Última Hora Ping</th>
                <th><a asp-action="Index" asp-controller="Actividad" class="btn btn-outline-secondary align-items-center"><img src="~/icons/clock-rotate-left-solid.svg" style="width: 16px; height: 16px;"></a></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var actividad in Model)
            {
                <tr data-ip="@actividad.DireccionIP">
                    <td>@actividad.ID_Equipo</td>
                    <td>@actividad.DireccionIP</td>
                    <td>@actividad.Area</td>
                    <td>@actividad.DescripcionEquipo</td>
                    <td>@actividad.TipoEquipo</td>
                    <td data-ping="@actividad.Ping">
                        @if (actividad.Ping)
                        {
                            <span class="text-success align-items-center"><img src="~/icons/signal-solid.svg" style="width: 16px; height: 16px;"></span>
                        }
                        else
                        {
                            <span class="text-danger align-items-center"><img src="~/icons/sort-down-solid.svg" style="width: 16px; height: 16px;"></span>
                        }
                    </td>
                    <td>@(actividad.UltimaHoraPing?.ToString("dd/MM/yyyy HH:mm:ss") ?? "No disponible")</td>
                    <td>
                        @if (!string.IsNullOrEmpty(actividad.DescripcionEquipo))
                        {
                            <a href="@Url.Action("Detalles", "EquiposDetalles", new { id = actividad.ID_Equipo })"
                               class="btn btn-info">
                                <img src="~/icons/file-circle-question-solid.svg" style="width: 16px; height: 16px;">
                            </a>
                            <a href="@Url.Action("PredecirEstado", "Predicciones", new { ip = actividad.DireccionIP, hora = actividad.UltimaHoraPing?.ToString("dd/MM/yyyy HH:mm:ss") })"
                               class="btn btn-success justify-content-center align-items-center">
                                <img src="~/icons/magnifying-glass-chart-solid.svg" style="width: 16px; height: 16px;">
                            </a>
                        }
                        else
                        {
                            <a asp-controller="EquiposDetalles" asp-action="CrearActividad" asp-route-direccionIP="@actividad.DireccionIP" class="btn btn-primary btn-block">
                                <i class="fa-solid fa-folder-plus"></i> Asignar Equipo
                            </a>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
@if (ViewBag.Error != null)
{
    <div class="alert alert-danger">
        @ViewBag.Error
    </div>
}
<script src="~/lib/jquery/dist/jquery.min.js"></script>
@* script para generar grafico *@
<script>
    $(document).ready(function () {

        // Captura el clic en las filas para seleccionar la IP y cambiar el color
        $('tr[data-ip]').on('click', function () {
            // Remueve la clase de cualquier otra fila seleccionada
            $('tr[data-ip]').removeClass('table-primary');
            // Agrega la clase a la fila clickeada
            $(this).addClass('table-primary');

            // Obtener la IP seleccionada
            const ipSeleccionada = $(this).data('ip');
            actualizarGraficoHistorialPings(ipSeleccionada);
        });
        function actualizarGraficoHistorialPings(ip) {
            $.ajax({
                // ObtenerHistorialPingsAJAX es la funcion que tiene los datos
                url: '@Url.Action("ObtenerHistorialPingsAJAX", "Actividad")',
                type: 'GET',
                data: { ip: ip }, // Enviar la IP seleccionada al servidor
                success: function (data) {
                    if (Array.isArray(data) && data.length > 0) {
                        const filteredData = data
                        // const filteredData = data.filter(ping => ping.direccionIP === ip);
                        console.log('Asi se ve la filteredData : ',filteredData);
                        var cantidadDatos = -10;
                        const limitedData = filteredData;// datos a mostrar
                        // const limitedData = filteredData.slice(cantidadDatos);
                        console.log('Asi se ve la limitedData : ',limitedData);

                        const seriesData = limitedData.map(ping => {
                            console.log('asi se ve el la hora antes de formato',ping.ultimaHoraPing);
                            const fecha = ping.ultimaHoraPing;
                            /* const fecha = new Date(ping.ultimaHoraPing); */ // Marca de tiempo para las Highcharts
                            // const fecha = new Date(ping.ultimaHoraPing).getTime();;
                            console.log('asi se ve la fecha',fecha);
                            return [fecha, ping.ping ? 1 : 0]; // Representar el estado de ping como 1 o 0
                        });

                        Highcharts.chart('container', {
                            chart: {
                                type: 'line'
                            },
                            title: {
                                text: `Historial de Pings para la IP ${ip} (Últimos ${cantidadDatos} Pings)`
                            },
                            xAxis: {
                                type: 'datetime',
                                title: {
                                    text: 'Fecha y Hora'
                                },
                                tickInterval: 10 * 60 * 1000, // Intervalo de 10 minutos en milisegundos
                                dateTimeLabelFormats: {
                                    minute: '%H:%M', // Formato para mostrar solo horas y minutos
                                    hour: '%H:%M'    // Formato alternativo para horas
                                }
                            },
                            yAxis: {
                                title: {
                                    text: 'Estado de Ping'
                                },
                                labels: {
                                    formatter: function () {
                                        return this.value === 1 ? 'Activo' : 'Inactivo';
                                    }
                                },
                                min: 0,
                                max: 1,
                                tickInterval: 1
                            },
                            tooltip: {
                                formatter: function () {
                                    const fecha = Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x); // Formato de la fecha
                                    const estado = this.y === 1 ? 'Activo' : 'Inactivo'; // Estado del ping
                                    return `<b>Fecha y Hora:</b> ${fecha}<br><b>Estado:</b> ${estado}`;
                                }
                            },
                            series: [{
                                name: 'Ping',
                                data: seriesData,
                                step: 'left',
                                tooltip: {
                                    pointFormatter: function () {
                                        return `Estado: ${this.y === 1 ? 'Activo' : 'Inactivo'}`;
                                    }
                                }
                            }]
                        });
                    } else {
                        $('#container').html('<p class="text-center">No hay historial de pings disponible para la IP seleccionada.</p>');
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error al obtener el historial de pings:", error);
                }
            });
        }
    });
</script>


<!-- Contenedor para l  a gráfica -->
<div id="container" style="min-height: 400px;"></div>


@* script para exportar a excel *@
<script>
            document.getElementById('exportButton').addEventListener('click', function () {
        // Clonar la tabla para evitar modificar el DOM original
        let table = document.getElementById('actividadTable').cloneNode(true);

        // Reemplazar los iconos de ping por valores de texto
        let rows = table.querySelectorAll('tbody tr');
        rows.forEach(row => {
            let pingCell = row.querySelector('td[data-ping]');
            if (pingCell) {
                let pingValue = pingCell.getAttribute('data-ping') === "True" ? "Activa" : "Inactiva";
                pingCell.textContent = pingValue;
            }
        });

        // Convertir la tabla clonada a una hoja de cálculo
        let workbook = XLSX.utils.table_to_book(table, { sheet: "Actividad" });

        // Exportar el archivo
        XLSX.writeFile(workbook, "Actividad.xlsx");

    });

</script>