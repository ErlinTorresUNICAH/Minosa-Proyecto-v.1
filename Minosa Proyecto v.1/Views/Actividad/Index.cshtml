@model List<Actividad>

<div class="mt-4">
    
    <div class="text-center">
        <h4 class="text-center">Historial de Pings</h4>
        <button id="exportButton" class="btn btn-success m-2">
            <i class="fas fa-file-excel"></i> Exportar a Excel
        </button>
        <a asp-action="IndexGraficos" asp-controller="Actividad" class="btn btn-primary">Dispositivos Graficos</a>
    </div>
    <nav class="text-center">
        <ul class="pagination justify-content-center text-center">
            @{
                int totalPages = (int)Math.Ceiling((double)ViewBag.TotalRecords / ViewBag.PageSize);
                int currentPage = ViewBag.PageNumber;

                // Botón "Anterior"
                if (currentPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", "Actividad", new { pageNumber = currentPage - 1, pageSize = ViewBag.PageSize })">Anterior</a>
                    </li>
                }

                // Mostrar máximo 10 páginas visibles
                int maxPagesToShow = 10;
                int startPage = Math.Max(1, currentPage - maxPagesToShow / 2);
                int endPage = Math.Min(totalPages, startPage + maxPagesToShow - 1);

                for (int i = startPage; i <= endPage; i++)
                {
                    <li class="page-item @(i == currentPage ? "active" : "")">
                        <a class="page-link" href="@Url.Action("Index", "Actividad", new { pageNumber = i, pageSize = ViewBag.PageSize })">@i</a>
                    </li>
                }

                // Botón "Siguiente"
                if (currentPage < totalPages)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", "Actividad", new { pageNumber = currentPage + 1, pageSize = ViewBag.PageSize })">Siguiente</a>
                    </li>
                }
            }
        </ul>

    </nav>

    <div class=" shadow-lg p-3 mb-5 bg-body-tertiary rounded" data-current-page="@ViewBag.PageNumber">
        <table id="historialTable" class="table-responsive table table-sm table-bordered" style="table-layout: auto; width: 100%;">
            <thead class="table-dark">
                <tr>
                    <th>Dirección IP</th>
                    <th>Resultado del Ping</th>
                    <th>Dia</th>
                    <th>Fecha</th>
                    <th>Hora</th>
                </tr>
            </thead>
            <tbody id="historialPings">
                @if (ViewBag.HistorialPings != null && ViewBag.HistorialPings.Count > 0)
                {
                    foreach (var ping in ViewBag.HistorialPings)
                    {
                        <tr style="@(ping.Ping ? "background-color: #d4edda;" : "background-color: #f8d7da;")">
                            <td>@ping.DireccionIP</td>
                            <td data-ping="@ping.Ping">
                                @if (ping.Ping)
                                {
                                    <span class="text-success"><img src="~/icons/signal-solid.svg" style="width: 16px; height: 16px;"></span>
                                }
                                else
                                {
                                    <span class="text-danger"><img src="~/icons/sort-down-solid.svg" style="width: 16px; height: 16px;"></span>
                                }
                            </td>
                            <td>@ping.UltimaHoraPing.ToString("dddd", new System.Globalization.CultureInfo("es-ES"))</td>
                            <td>@ping.UltimaHoraPing.ToString("dd/MM/yyyy")</td>
                            <td>@ping.UltimaHoraPing.ToString("HH:mm:ss")</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5" class="text-center">No hay historial de pings disponible.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    

</div>

@if (ViewBag.Error != null)
{
    <div class="alert alert-danger">
        @ViewBag.Error
    </div>
}

<script src="~/lib/jquery/dist/jquery.min.js"></script>
@* Funcion para paginacion de la tabla *@
<script>
    function formatearFecha(fechaISO) {
        const fecha = new Date(fechaISO);
        const opcionesDia = { weekday: 'long' };
        const opcionesFecha = { year: 'numeric', month: '2-digit', day: '2-digit' };
        const opcionesHora = { hour: '2-digit', minute: '2-digit', second: '2-digit' };

        const dia = new Intl.DateTimeFormat('es-ES', opcionesDia).format(fecha);
        const fechaFormateada = new Intl.DateTimeFormat('es-ES', opcionesFecha).format(fecha);
        const horaFormateada = new Intl.DateTimeFormat('es-ES', opcionesHora).format(fecha);

        return { dia, fecha: fechaFormateada, hora: horaFormateada };
    }

    $(document).ready(function () {
            function actualizarHistorialPings() {
        $.ajax({
            url: '@Url.Action("ObtenerHistorialPingsAJAXParaIndexHistorial", "Actividad")',
            type: 'GET',
            success: function (data) {
                let historialTableBody = $("#historialPings");
                historialTableBody.empty();
                console.log("Datos recibidos actualizarHistorialPings:", data);
                if (data.data && Array.isArray(data.data) && data.data.length > 0) {
                    data.data.forEach(function (ping) {
                        const fechaFormateada = formatearFecha(ping.ultimaHoraPing);
                        let row = `
                            <tr style="${ping.ping ? 'background-color: #d4edda;' : 'background-color: #f8d7da;'}">
                                <td>${ping.direccionIP}</td>
                                <td>${ping.ping ? '<span class="text-success"><i class="bi bi-reception-4"></i></span>' : '<span class="text-danger"><i class="bi bi-reception-0"></i></span>'}</td>
                                <td>${fechaFormateada.dia}</td>
                                <td>${fechaFormateada.fecha}</td>
                                <td>${fechaFormateada.hora}</td>
                            </tr>
                        `;
                        historialTableBody.append(row);
                    });
                    console.log("Estos son los datos",row);
                } else {
                    historialTableBody.append('<tr><td colspan="5" class="text-center">No hay historial de pings disponible.</td></tr>');
                }
            },
            error: function (xhr, status, error) {
                console.error("Error al obtener el historial de pings:", error);
            }
        });
    }


        function actualizarPingYHora()
    {
        $.ajax({
            url: '@Url.Action("ObtenerHistorialPingsAJAXParaIndexHistorial", "Actividad")', // Ruta para obtener los datos actualizados
            type: 'GET',
            success: function (data) {
                  console.log("Datos recibidos actualizarPingYHora:", data);
                if (Array.isArray(data.data && data.data.length > 0)) {
                    data.data.forEach(function (actividad) {
                        // Busca la fila correspondiente por la IP de dirección
                        let fila = $(`#historialPings tr[data-ip="${actividad.DireccionIP}"]`);
                        if (fila.length > 0) {
                            // Actualiza el valor del Ping
                            let celdaPing = fila.find('td[data-columna="Ping"]');
                            if (actividad.Ping) {
                                celdaPing.html('<span class="text-success"><i class="bi bi-reception-4"></i></span>');
                            } else {
                                celdaPing.html('<span class="text-danger"><i class="bi bi-reception-0"></i></span>');
                            }

                            // Actualiza el valor de la Última Hora Ping
                            let celdaHoraPing = fila.find('td[data-columna="UltimaHoraPing"]');
                            celdaHoraPing.text(actividad.UltimaHoraPing ? new Date(actividad.UltimaHoraPing).toLocaleString('es-ES') : 'No disponible');
                        }
                    });
                } else {
                    console.error("No se encontraron datos de actividades actualizados.");
                }
            },
            error: function (xhr, status, error) {
                console.error("Error al obtener el estado actualizado de Ping y Hora:", error);
            }
        });
    }

                setInterval(actualizarHistorialPings, 15000); // Cambia a 15 segundos si quieres un desfase

                // Llama a la función cada cierto tiempo para actualizar solo los campos de Ping y Hora
                setInterval(actualizarPingYHora, 15000);
                
                
    });
</script>
@* Script para crear el reporte a Excel *@
<script>
            document.getElementById('exportButton').addEventListener('click', function () {
        // Clonar la tabla para evitar modificar el DOM original
        let table = document.getElementById('historialTable').cloneNode(true);

        // Reemplazar los iconos de ping por valores de texto
        let rows = table.querySelectorAll('tbody tr');
        rows.forEach(row => {
            let pingCell = row.querySelector('td[data-ping]');
            if (pingCell) {
                let pingValue = pingCell.getAttribute('data-ping') === "True" ? "Activa" : "Inactiva";
                pingCell.textContent = pingValue;
            }
        });

        // Convertir la tabla clonada a una hoja de cálculo
        let workbook = XLSX.utils.table_to_book(table, { sheet: "Historial" });

        // Exportar el archivo
        XLSX.writeFile(workbook, "Historial.xlsx");

    });

</script>